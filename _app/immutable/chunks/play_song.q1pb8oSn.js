import{w as m}from"./index.c0wBgp3C.js";import{U as b}from"./error.8yf43-la.js";import{v as d}from"./scheduler.0wHob__M.js";import{D as U}from"./audio_helpers.7XC84r-k.js";import{l as F,s as P}from"./storage.nJRkxBE0.js";const S=(e,o)=>{let t,a=null;const r=m(e==="audio"?{type:e,url:o,status:"initial",audio:null,promise:a}:{type:e,url:o,status:"initial",image:null,promise:a}),{update:n,subscribe:c}=r,i=()=>{n(s=>({...s,status:"success"})),t()},u=()=>{n(s=>s.url===o?{...s,status:"failure"}:s),t()};return{subscribe:c,load:()=>a||(a=new Promise(s=>t=s),n(s=>{switch(s.type){case"image":{const l=new Image;return l.addEventListener("load",i,{once:!0}),l.addEventListener("error",u,{once:!0}),l.src=s.url,{...s,status:"pending",image:l,promise:a}}case"audio":{const l=new Audio;return l.addEventListener("canplaythrough",i,{once:!0}),l.addEventListener("error",u,{once:!0}),l.src=s.url,{...s,status:"pending",audio:l,promise:a}}default:throw new b(s)}}),a)}},w=new Map,x=e=>{for(const o of w.values()){const t=d(o);t.audio&&!t.audio.paused&&(t.audio.pause(),e==null||e(t))}},L=(e,o=0)=>(o!==null&&(e.currentTime=o),e.play().catch(()=>{}));Promise.resolve();const y=e=>e,g=(e,o,t=y,a=y)=>{const r=e.set,n=e.update;let c=F(o,null);if(c!=null){const u=a(c);if(u!==void 0)if(r)r(u);else if(n)n(()=>u);else throw Error("invalid store, expected either a set, update, or swap function")}const i=u=>{P(o,c=t(u))};return e.getJson=()=>c===void 0?c=t(d(e)):c,r&&(e.set=function(){const u=r.apply(this,arguments);return i(d(e)),u}),n&&(e.update=function(){const u=n.apply(this,arguments);return i(d(e)),u}),e},E=g(m(U),"volume"),T=g(m(!1),"muted"),h=g(m(!1),"paused"),V=g(m(!1),"shuffle"),j=g(m(!1),"repeat");let A=0;const D=e=>({id:A++,song:e,audio:null,$audio:null,audio_el:null,duration:null,play:null,ended:null}),f=m(null),q=async e=>{console.log("play_song",e,E);let o=D(e);const t=d(f);if(e===(t==null?void 0:t.song)){console.log("already playing",t);return}f.set(o);const a=()=>{f.update(p=>(p==null?void 0:p.id)===o.id?null:p)},r=p=>{f.update(_=>(_==null?void 0:_.id)===o.id?o={...o,...p}:_)},{url:n}=e;let c=!1;if(x(p=>{p.url===n&&(c=!0)}),c)return a();let i=w.get(n);i||(i=S("audio",n),w.set(n,i)),r({audio:i}),console.log("loading",o),await i.load();const u=d(f);if((u==null?void 0:u.id)!==o.id)return;const s=d(i);if(!s||s.status!=="success"||!s.audio)return console.error("Failed to load song"),r({$audio:s}),a();const l=s.audio;return l.volume=d(E),r({$audio:s,audio_el:l,duration:l.duration,play:d(h)?null:L(l),ended:new Promise(p=>l.addEventListener("ended",()=>{a(),p()},{once:!0}))}),console.log("loaded",o),o},z=e=>{var o,t;if(console.log("stop_song",e),e){const{id:a,audio_el:r}=e;r==null||r.pause(),f.update(n=>(n==null?void 0:n.id)===a?null:n)}else(t=(o=d(f))==null?void 0:o.audio_el)==null||t.pause(),f.set(null)},B=e=>{console.log("resume_song",e);const o=d(f);e&&e.id===(o==null?void 0:o.id)&&(f.update(t=>t?{...t,play:t.audio_el&&L(t.audio_el,null)||null}:null),h.set(!1))},C=e=>{var t;console.log("pause_song",e);const o=d(f);e&&e.id===(o==null?void 0:o.id)&&((t=o==null?void 0:o.audio_el)==null||t.pause(),h.set(!0))};export{q as a,f as b,h as c,z as d,C as e,B as f,T as m,x as p,j as r,V as s,E as v};
