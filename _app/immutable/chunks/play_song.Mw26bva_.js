import{w as g}from"./index.mvauKzP3.js";import{U as L}from"./error.8yf43-la.js";import{v as r}from"./scheduler.EKw-xcnK.js";import{D as b}from"./audio_helpers.nUJdtt8J.js";import{l as U,s as F}from"./storage.11dQHD0n.js";const P=(e,o)=>{let n,t=null;const p=g(e==="audio"?{type:e,url:o,status:"initial",audio:null,promise:t}:{type:e,url:o,status:"initial",image:null,promise:t}),{update:l,subscribe:d}=p,i=()=>{l(s=>({...s,status:"success"})),n()},u=()=>{l(s=>s.url===o?{...s,status:"failure"}:s),n()};return{subscribe:d,load:()=>t||(t=new Promise(s=>n=s),l(s=>{switch(s.type){case"image":{const a=new Image;return a.addEventListener("load",i,{once:!0}),a.addEventListener("error",u,{once:!0}),a.src=s.url,{...s,status:"pending",image:a,promise:t}}case"audio":{const a=new Audio;return a.addEventListener("canplaythrough",i,{once:!0}),a.addEventListener("error",u,{once:!0}),a.src=s.url,{...s,status:"pending",audio:a,promise:t}}default:throw new L(s)}}),t)}},m=new Map,S=e=>{for(const o of m.values()){const n=r(o);n.audio&&!n.audio.paused&&(n.audio.pause(),e?.(n))}},E=(e,o=0)=>(o!==null&&(e.currentTime=o),e.play().catch(()=>{}));Promise.resolve();const h=e=>e,_=(e,o,n=h,t=h)=>{const p=e.set,l=e.update;let d=U(o,null);if(d!=null){const u=t(d);if(u!==void 0)if(p)p(u);else if(l)l(()=>u);else throw Error("invalid store, expected either a set, update, or swap function")}const i=u=>{F(o,d=n(u))};return e.getJson=()=>d===void 0?d=n(r(e)):d,p&&(e.set=function(){const u=p.apply(this,arguments);return i(r(e)),u}),l&&(e.update=function(){const u=l.apply(this,arguments);return i(r(e)),u}),e},v=_(g(b),"volume"),R=_(g(!1),"muted"),y=_(g(!1),"paused"),T=_(g(!1),"shuffle"),V=_(g(!1),"repeat");let x=0;const A=e=>({id:x++,song:e,audio:null,$audio:null,audio_el:null,duration:null,play:null,ended:null}),c=g(null),j=async e=>{console.log("play_song",e,v);let o=A(e);const n=r(c);if(e===n?.song){console.log("already playing",n);return}c.set(o);const t=()=>{c.update(f=>f?.id===o.id?null:f)},p=f=>{c.update(w=>w?.id===o.id?o={...o,...f}:w)},{url:l}=e;let d=!1;if(S(f=>{f.url===l&&(d=!0)}),d)return t();let i=m.get(l);if(i||(i=P("audio",l),m.set(l,i)),p({audio:i}),console.log("loading",o),await i.load(),r(c)?.id!==o.id)return;const s=r(i);if(!s||s.status!=="success"||!s.audio)return console.error("Failed to load song"),p({$audio:s}),t();const a=s.audio;return a.volume=r(v),p({$audio:s,audio_el:a,duration:a.duration,play:r(y)?null:E(a),ended:new Promise(f=>a.addEventListener("ended",()=>{t(),f()},{once:!0}))}),console.log("loaded",o),o},q=e=>{if(console.log("stop_song",e),e){const{id:o,audio_el:n}=e;n?.pause(),c.update(t=>t?.id===o?null:t)}else r(c)?.audio_el?.pause(),c.set(null)},z=e=>{console.log("resume_song",e);const o=r(c);e&&e.id===o?.id&&(c.update(n=>n?{...n,play:n.audio_el&&E(n.audio_el,null)||null}:null),y.set(!1))},B=e=>{console.log("pause_song",e);const o=r(c);e&&e.id===o?.id&&(o?.audio_el?.pause(),y.set(!0))};export{j as a,c as b,y as c,q as d,B as e,z as f,R as m,S as p,V as r,T as s,v};
